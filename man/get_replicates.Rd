% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fct_model.R
\name{get_replicates}
\alias{get_replicates}
\title{Extract Posterior Predictive Replications}
\usage{
get_replicates(fit, input_data, metadata, N = 10, pred_interval = 0.95)
}
\arguments{
\item{fit}{CmdStanR generated quantities fit object from posterior predictive
checks (output of run_gq with ppc code).}

\item{input_data}{Original input data frame used for model fitting with
columns: positive, total, and time (if time-varying).}

\item{metadata}{List containing model specifications including:
\itemize{
  \item is_timevar: Logical indicating whether data varies over time
  \item family: Distribution family ("binomial" or "normal")
}}

\item{N}{Integer. Number of posterior draws to extract for replication (default: 10).}

\item{pred_interval}{Numeric. Prediction interval coverage for summary statistics (default: 0.95).}
}
\value{
Posterior predictive replications:
  \itemize{
    \item If is_timevar=FALSE: Numeric vector of overall proportion estimates across N draws
    \item If is_timevar=TRUE: Data frame with columns:
      \itemize{
        \item time: Time periods
        \item V1, V2, ..., VN: Proportion estimates for each posterior draw
      }
  }
}
\description{
Extracts posterior predictive replications (y_rep) from generated
quantities for posterior predictive checking. Aggregates data temporally if
time-varying and provides replicated datasets for model validation.
}
\details{
The function:
\enumerate{
  \item Extracts y_rep draws from generated quantities
  \item Randomly samples N posterior draws
  \item Aggregates by time period if time-varying
  \item Converts counts to proportions using total sample sizes
}
}
\examples{
\dontrun{
# Extract posterior predictive replications
y_rep <- get_replicates(
  fit = ppc_fit,
  input_data = processed_data,
  metadata = model_metadata,
  N = 20
)

# For time-varying data, y_rep is a data frame
if (model_metadata$is_timevar) {
  print(head(y_rep))
} else {
  # For non-time-varying, y_rep is a vector
  print(summary(y_rep))
}
}
}
